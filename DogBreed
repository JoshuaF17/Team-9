public class DogBreed {
	// instance variables;
	private String breed = "";
	private double newOwn = 0;
	private double friendly = 0;
	private double groom = 0;
	private double health = 0;
	private double size = 0;
	private double train = 0;
	private double bark = 0;
	private double exercise = 0;
	
	
	// constructor with all variables in order to pair dog with potenital candidates
	
	public DogBreed(String br, double n, double f, double g, double h, double s, double t, double b, double e){
	this.breed = br;
	this.train = t;
	this.newOwn = n;
	this.freindly = f;
	this.groom = g;
	this.health = h;
	this.size = s;
	this.bark = b;
	this.exercise = e;
	}
	
	// getter/setter method
	
	public String getBreed() {
		return breed;
	}
	
	public void setBreed(String breedType) {
		breed = breedType;
	}
	
	public int getTrain(){
	   return train;   
	}
	public void setTrain(int train1){
	   train = train1;
	}
	public int getFriendly(){
	   return apt;   
	}
	public void setFriendly(int friendly1){
	   friendly = friendly1;
	}
	public int getNewOwn(){
	   return newOwn;   
	}
	public void setNewOwn(int newOwn1){
	   newOwn = newOwn1;
	}
	public int getGroom(){
	   return groom;   
	}
	public void setGroom(int groom1){
	   groom = groom1;
	}
	public int getHealth(){
	   return health;   
	}
	public void setHealth(int health1){
	   health = health1;
	}
	public int getSize(){
	   return size;   
	}
	public void setSize(int size1){
	   size = size1;
	}
	public int getBark(){
	   return bark;   
	}
	public void setBark(int bark1){
	  bark = bark1;
	}
	
	public double getExercise() {
		return exercise;
	}
	
	public void setExercise(double exercise1) {
		exercise = exercise1;
	}
	
	public String toString() {
		return "Dog breed: " + breed + ", New Owner: " + newOwn + ", Friendly: " + friendly + ", Groom: " + groom
			+ ", Health: " + health + ", Size: " + size + ", Train: " + train + ", Bark: " + bark + ", Exercise: "
			+ exercise;
	}
	
	//main function
		
}

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

public class DogTinder {
	private ArrayList<DogBreed> dogs = new ArrayList<DogBreed>();
	private ArrayList<Human> humans = new ArrayList<Human>();
	private Scanner keyboard = new Scanner(System.in);
	private ArrayList<Match> listOfScores = new ArrayList<Match>();
	
	public DogTinder() throws IOException {

		loadDogs();
		humanProfile();
		compareHumanToDogs();
		System.out.println("Awesome " + humans.get(0).getName()
				+ "! It looks like your best match is a(n) " + compareScores() + "!");
	}
	
	private void humanProfile() {
		Human human1 = new Human();
		
		System.out.print("What is your name? ");
		String profileName = keyboard.nextLine();
		human1.setName(profileName);
		
		
		System.out.print("Have you ever owned a dog? Enter Y or N: ");
		char newOwner = keyboard.nextLine().charAt(0);
		if (newOwner == 'Y') {
			human1.setNewOwn(1);
		} else if (newOwner == 'N') {
			human1.setNewOwn(0);
		}
		
		System.out.println("The following questions require your answer on a scale of 1 to 5. "
				+ "\n 1 - strongly disagree. \n 2 - disagree \n 3 - neither disagree or agree"
				+ "\n 4 - agree \n 5 - strongly agree");
		System.out.println("Please enter a value of 1-5 for each question.");
		System.out.println("Please answer honestly so we can find the right match for you!");
		
		System.out.print("I like to socialize: ");
		double social = keyboard.nextDouble();
		human1.setFriendly(social);
		
		
		System.out.print("I don't mind cleaning a lot: ");
		double clean = keyboard.nextDouble();
		human1.setGroom(clean);
		
		System.out.print("I would be okay if my dog's breed had a history of health problems as"
				+ "long as the dog is right for me: ");
		double health = keyboard.nextDouble();
		human1.setHealth(health);
		
		System.out.print("I would put a lot of time into training my dog: ");
		double training = keyboard.nextDouble();
		human1.setTrain(training);
		
		
		System.out.print("I do not mind if my dog barks: ");
		double bark = keyboard.nextDouble();
		human1.setBark(bark);
		
		System.out.print("I would put a lot of time into exercising my dog: ");
		double exercise = keyboard.nextDouble();
		human1.setExercise(exercise);
		
		System.out.print("For this question, please enter: \n 1 if you prefer small dogs "
				+ "\n 3 if you prefer medium dogs \n 5 if you prefer large dogs \n");
		double size = keyboard.nextDouble();
		human1.setSize(size);
		
		humans.add(human1);
		
		System.out.println("Thanks for answering! Finding the best match for you!");
		
	}
	
	public void compareHumanToDogs() {
		Human humanToCompare = humans.get(0);
		
		for (DogBreed dog : dogs) {
			double matchScore = 0.0;
			double score = 0.0;
			score = Math.abs(humanToCompare.getNewOwn() - dog.getNewOwn());
			matchScore = matchScore + score;
			
			score = Math.abs(humanToCompare.getFriendly() - dog.getFriendly());
			matchScore = matchScore + score;
			
			score = Math.abs(humanToCompare.getGroom() - dog.getGroom());
			matchScore = matchScore + score;
			
			score = Math.abs(humanToCompare.getHealth() - dog.getHealth());
			matchScore = matchScore + score;
			
			score = Math.abs(humanToCompare.getTrain() - dog.getTrain());
			matchScore = matchScore + score;
			
			score = Math.abs(humanToCompare.getBark() - dog.getBark());
			matchScore = matchScore + score;
			
			score = Math.abs(humanToCompare.getExercise() - dog.getExercise());
			matchScore = matchScore + score;
			
			if (humanToCompare.getSize() != dog.getSize()) {
				matchScore = matchScore + 1;
			}
			
			Match newMatchScore = new Match(dog.getBreed(), matchScore);
			listOfScores.add(newMatchScore);
			
		}
		
	}
	
	public String compareScores() {
		double bestMatchScore = 26.0;
		String bestDog = "";
		for (Match i: listOfScores) {
			if (i.getMatchScore() < bestMatchScore) {
				bestMatchScore = i.getMatchScore();
				bestDog = i.getDogBreed();
			}
		}
		return bestDog;
		
	}
	
	private void loadDogs() throws IOException {

		BufferedReader fileReader = new BufferedReader(new FileReader("DogDataset.txt"));
		String line = fileReader.readLine();
		while (line != null) {

			String[] fields = line.split(",");

			dogs.add(new DogBreed(fields[0], Double.parseDouble(fields[1]), Double.parseDouble(fields[2]),
					Double.parseDouble(fields[3]), Double.parseDouble(fields[4]), Double.parseDouble(fields[5]),
					Double.parseDouble(fields[6]), Double.parseDouble(fields[7]), Double.parseDouble(fields[8])));

			line = fileReader.readLine();

		}
		fileReader.close();
	}

	private void printDogs() {

		for (DogBreed i : dogs) {
			System.out.println(i);
//			System.out.println(i.getBreed());
		}
		System.out.println("");
	}
	
	private void printHumans() {

		for (Human i : humans) {
			System.out.println(i);
		}
	}
}
